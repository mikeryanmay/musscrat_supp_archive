###################
# Do the analysis #
###################

monitors[mn_index++] = mnScreen(printgen=100)
monitors[mn_index++] = mnModel(filename="output/" + name + "/params_posterior_" + run_ID + ".log", printgen=20, separator = TAB)

if(estimate_tree == true) {
    monitors[mn_index++] = mnFile(filename="output/" + name + "/trees_posterior_" + run_ID + ".trees", printgen=20, separator = TAB, psi)
}

if(pps == true) {
    monitors[mn_index++] = mnStochasticVariable(filename="output/" + name + "/stochastic_" + run_ID + ".log", printgen=200, separator = TAB)
}

###########################
# Define the model object #
###########################

my_model = model(psi)

################
# Run the MCMC #
################

analysis = mcmc(my_model, monitors, moves)
analysis.burnin(generations=5000,tuningInterval=100)
analysis.operatorSummary()
analysis.run(generations=200000)
# analysis.operatorSummary()

if(estimate_tree == true) {
    if(type(psi) == "Tree") {
        treetrace = readTreeTrace("output/" + name + "/trees_posterior_" + run_ID + ".trees", treetype="non-clock")
    } else {
        treetrace = readTreeTrace("output/" + name + "/trees_posterior_" + run_ID + ".trees", treetype="clock")
    }
    map_tree = mapTree(treetrace,"output/" + name + "/map_tree_" + run_ID + ".trees")
}

if(pps == true) {
    stochasticvariabletrace = readStochasticVariableTrace("output/" + name + "/stochastic_" + run_ID + ".log",delimiter=TAB)
    pps = posteriorPredictiveSimulation(model=my_model, directory="output/" + name + "/pps_sim_" + run_ID , trace=stochasticvariabletrace)
    pps.run(thinning=1)
}
