###################################
# Define the discrete-trait model #
###################################

discrete_clock_rate_mean =  expected_num_changes / tree.treeLength()
discrete_clock_rate ~ dnLognormal( ln(discrete_clock_rate_mean) - (H^2) / 2, H)
moves[move_index++] = mvScale(discrete_clock_rate, lambda=0.5, weight=1.0)

beta ~ dnReversibleJumpMixture(simplex(0.5,0.5), dnDirichlet(v(1,1)), 0.5)
moves[move_index++] = mvRJSwitch(beta, weight=1.0)
moves[move_index++] = mvBetaSimplex(beta, weight=1.0)
Q_discrete := fnF81(beta)

#########################
# Define the CTMC model #
#########################

disc_traits ~ dnPhyloCTMCDASiteIID(tree=psi, Q=Q_discrete, branchRates=discrete_clock_rate, type="Standard", nSites=1)
disc_traits.clamp(discrete_traits)

moves[move_index++] = mvCharacterHistory(ctmc=disc_traits, qmap_site=Q_discrete, graph="node",   proposal="rejection", weight=50.0)
moves[move_index++] = mvCharacterHistory(ctmc=disc_traits, qmap_site=Q_discrete, graph="branch", proposal="rejection", weight=50.0)

for(i in 1:num_branches) {
    num_changes[i] := sum(disc_traits.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)
