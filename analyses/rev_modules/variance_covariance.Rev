#####################################
# Define the continuous-trait model #
#####################################

proportional_var    ~ dnDirichlet(rep(alpha_sigma, num_cont_traits))
moves[move_index++] = mvBetaSimplex(proportional_var, weight=10.0)
relative_var := proportional_var * num_cont_traits
relative_sd  := relative_var ^ 0.5

partial_correlation_matrix ~ dnLKJPartial(eta, num_cont_traits)
moves[move_index++] = mvCorrelationMatrixRandomWalk(partial_correlation_matrix, sigma=0.1, weight=10.0, tuneTarget=0.2)
# moves[move_index++] = mvCorrelationMatrixElementSwap(partial_correlation_matrix, weight=10.0)
# moves[move_index++] = mvCorrelationMatrixSingleElementBeta(partial_correlation_matrix, alpha=10.0, weight=100.0)

for(i in 1:(num_cont_traits - 1)) {
    for(j in (i+1):num_cont_traits) {
        moves[move_index++] = mvCorrelationMatrixSpecificElementBeta(partial_correlation_matrix, i, j, alpha=10.0, weight=5.0, tuneTarget=0.234)
    }
}

correlation_matrix  := fnPartialToCorr(partial_correlation_matrix)
sigma               := fnDecompVarCovar(relative_sd, correlation_matrix)
partial_correlation := partial_correlation_matrix.upperTriangle()
correlation         := correlation_matrix.upperTriangle()
